int firstOccurence(vector<int>& arr, int x){
        int n = arr.size();
        int low = 0 , high = n - 1 ;
        int first = -1;
        while(low <= high){
          int  mid = (low + high )/2;
            if(arr[mid] == x) {
                first = mid;
                high = mid - 1;
            }
            else if (arr[mid] > x){
                 high = mid - 1;
            }
            else {
               low = mid + 1;
            }
        }
        return first ;
    }
    int lastOccurence(vector<int>& arr, int x){
        int n = arr.size();
        int low = 0 , high = n - 1 ;
        int last = -1;
        while(low <= high){
          int  mid = (low + high )/2;
            if(arr[mid] == x) {
                last = mid;
                low = mid + 1;
            }
            else if (arr[mid] < x){
                low = mid + 1;
            }
            else {
                high = mid - 1;
            }
        }
        return last ;
    }
    pair <int , int > firstandlastPosition(vector<int>& arr, int x){
        int first = firstOccurence(arr,x);
        if(first == -1) return {-1 , -1};
        int last = lastOccurence(arr , x);
        return {first , last };
    }
    int countFreq(vector<int>& arr, int x) {
        // code here
        pair<int , int > ans = firstandlastPosition(arr , x);
        if(ans.first == -1) return 0;
        return ans.second - ans.first + 1;
    }
