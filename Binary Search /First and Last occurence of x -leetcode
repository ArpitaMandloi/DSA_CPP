int lowerBound(vector<int>& arr, int x ) {
        // code here
        int low = 0 ; 
         int n = arr.size();
        int high = n - 1;
        int ans = n ;
        while (low <= high){
            int mid = (low + high)/2;
            if(arr[mid] >= x){
                ans = mid ;
                high = mid - 1 ;
            }
            else low = mid + 1 ;
        }
        return ans;
    }
     int upperBound(vector<int>& arr,  int x ) {
        // code here
        int low = 0 ;
         int n = arr.size(); 
        int high = n - 1;
        int ans = n ;
        while (low <= high){
            int mid = (low + high)/2;
            if(arr[mid] > x){
                ans = mid ;
                high = mid - 1 ;
            }
            else low = mid + 1 ;
        }
        return ans;
    }
    vector<int> searchRange(vector<int>& arr, int k ) { 
        int n = arr.size();
        int lb = lowerBound(arr ,  k);
        if(lb == n || arr[lb] != k) return {-1,-1};
        return {lb , upperBound(arr ,  k) -1};
    }
